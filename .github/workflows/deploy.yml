name: Deploy

on:
  push:
    branches: [main]
    tags:
      - 'v*'

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/fastapi-template
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=ref,event=branch
            type=sha

      - name: Create Docker directories if they don't exist
        run: |
          mkdir -p docker/prod

      - name: Create Dockerfile if it doesn't exist
        run: |
          if [ ! -f docker/prod/Dockerfile ]; then
            echo "Creating docker/prod/Dockerfile"
            cat > docker/prod/Dockerfile << 'EOF'
            FROM python:3.11-slim as builder

            WORKDIR /app

            # Installation des dépendances système
            RUN apt-get update && apt-get install -y --no-install-recommends \
                build-essential \
                gcc \
                && apt-get clean \
                && rm -rf /var/lib/apt/lists/*

            # Installation des dépendances Python
            COPY requirements/prod.txt .
            RUN pip wheel --no-cache-dir --no-deps --wheel-dir /app/wheels -r prod.txt

            # Image finale
            FROM python:3.11-slim

            WORKDIR /app

            # Créer un utilisateur non-root
            RUN addgroup --system app && adduser --system --group app

            # Installer curl pour healthcheck
            RUN apt-get update && apt-get install -y --no-install-recommends \
                curl \
                && apt-get clean \
                && rm -rf /var/lib/apt/lists/*

            # Copier les wheels et installer les dépendances
            COPY --from=builder /app/wheels /wheels
            RUN pip install --no-cache /wheels/*

            # Copier le code de l'application
            COPY . .

            # Permissions pour l'utilisateur app
            RUN chown -R app:app /app
            USER app

            # Variables d'environnement
            ENV PYTHONPATH=/app \
                PYTHONUNBUFFERED=1 \
                PORT=8000

            # Healthcheck
            HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
                CMD curl -f http://localhost:${PORT}/health || exit 1

            # Exposer le port
            EXPOSE ${PORT}

            # Commande de démarrage
            CMD ["uvicorn", "src.main:app", "--host", "0.0.0.0", "--port", "8000"]
            EOF
          fi

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./docker/prod/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Reste du fichier inchangé...